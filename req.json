{"name":"AI Report Bot Workflow","nodes":[{"id":"webhook-user-request","name":"User Request Webhook","type":"n8n-nodes-base.webhook","typeVersion":4,"position":[-400,0],"parameters":{"path":"webhook-reportbot","httpMethod":"POST","responseMode":"onReceived","options":{"responseDataType":"firstEntryJson"}}},{"id":"route-request","name":"Route User Input","type":"n8n-nodes-base.function","typeVersion":2,"position":[-200,0],"parameters":{"functionCode":"return $input.all().map(item => {\n  const message = item.json.message?.toLowerCase();\n  const fileName = item.json.fileName;\n\n  if (message === 'approve') {\n    item.json.route = 'github';\n  } else if (!fileName) {\n    item.json.route = 'askFileName';\n  } else {\n    item.json.route = 'generateScript';\n  }\n\n  return item;\n});"}},{"id":"if-routing","name":"Routing Decision","type":"n8n-nodes-base.if","typeVersion":2,"position":[0,0],"parameters":{"conditions":{"string":[{"value1":"{{$json.route}}","value2":"askFileName"},{"value1":"{{$json.route}}","value2":"generateScript"}]}}},{"id":"respond-ask-filename","name":"Ask for File Name","type":"n8n-nodes-base.respondToWebhook","typeVersion":2,"position":[200,-150],"parameters":{"responseData":{"json":{"message":"Great—what would you like to name this script? (e.g. weekly_margin_report)"}}}},{"id":"openai-generate-script","name":"Generate Python Script","type":"n8n-nodes-base.openai","typeVersion":2,"position":[200,100],"parameters":{"operation":"chat","chatMessage":{"role":"user","content":"You are a code-generation assistant targeting Python 3.8.\nInput: a folder of `.tsv` files (each file is one table).\nUse pandas to:\n1. Discover and read all `.tsv` files from a directory `./input_data/`.\n2. Based on the user’s free-text requirement (below), decide which tables and columns are needed.\n3. Compute requested KPIs (sales, discount, ROS, initial_qty, final_qty, COGS, margins, and any custom formulas).\n4. If joining tables is necessary (e.g. linking sales to cogs), perform merges on matching keys.\n5. Write the final result to `./output/{{{$json.fileName}}}.tsv` using `df.to_csv(..., sep='\\t', index=False)`.\n\nUSER REQUIREMENT:\n{{{$json.message}}}\n\n**FORMAT your response** as exactly two fenced code blocks, with these headers:\n\n```python filename=\"{{{$json.fileName}}}.py\"\n# File: {{fileName}}.py\n# Python 3.8, uses pandas\nimport os\nimport glob\nimport pandas as pd\n\n# 1. Read all TSV tables\nall_files = glob.glob(os.path.join(\"input_data\", \"*.tsv\"))\ntables = { os.path.basename(f).replace(\".tsv\", \"\"): pd.read_csv(f, sep=\"\\t\") for f in all_files }\n\n# 2. Based on requirement, pick tables and columns\n#    [Your logic here: e.g., tables['sales'], tables['cogs'], etc.]\n\n# 3. KPI calculations\n#    e.g.: df[\"Margin_pct\"] = (df[\"Revenue\"] - df[\"COGS\"]) / df[\"Revenue\"] * 100\n#    [Add any user-specified formulas: ROS, Suggested Topline, Avg Discount, Change Indicator...]\n\n# 4. Merge/join tables if needed\n#    e.g.: merged = pd.merge(tables['sales'], tables['cogs'], on=[\"Channel\",\"Store\",\"SKU\",\"Day\"])\n\n# 5. Output final TSV\noutput_path = os.path.join(\"output\", \"{{{$json.fileName}}}.tsv\")\nmerged.to_csv(output_path, sep=\"\\t\", index=False)\nprint(f\"Report written to {output_path}\")\n```\n\n```text filename=\"requirements.txt\"\npandas\nglob2\n```"*_*
